# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

variables:
  bkstrgrg: 'usecasetf-rg'
  bkstrg: 'lbsusecasesa'
  bkcontainer: 'tfstate'
  bkstrgkey: 'function.tfstate'

stages:
  - stage: tfvalidate
    jobs:
    - job: validate
      continueOnError: false
      steps:
        - task: TerraformInstaller@1
          displayName: tfinstall
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'FunctionApp/SQL-Service_Connection'
            backendAzureRmResourceGroupName: '$(bkstrgrg)'
            backendAzureRmStorageAccountName: '$(bkstrg)'
            backendAzureRmContainerName: '$(bkcontainer)'
            backendAzureRmKey: '$(bkstrgkey)'
        - task: TerraformTaskV4@4
          displayName: validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
  - stage: tfdeploy
    condition: succeeded ('tfvalidate')
    dependsOn: tfvalidate
    jobs: 
    - job: apply
      steps:
        - task: TerraformInstaller@1
          displayName: tfinstall
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'FunctionApp/SQL-Service_Connection'
            backendAzureRmResourceGroupName: '$(bkstrgrg)'
            backendAzureRmStorageAccountName: '$(bkstrg)'
            backendAzureRmContainerName: '$(bkcontainer)'
            backendAzureRmKey: '$(bkstrgkey)'
        - task: TerraformTaskV4@4
          displayName: plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            environmentServiceNameAzureRM: 'FunctionApp/SQL-Service_Connection'
            commandOptions: '-var-file=terraform.tfvars -out=tfplan'
        - task: TerraformTaskV4@4
          displayName: apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            environmentServiceNameAzureRM: 'FunctionApp/SQL-Service_Connection'
            commandOptions: '-input=false tfplan'